from __future__ import annotations


class ListNode:
    def __init__(
        self,
        key: int,
        val: int,
        prev: ListNode | None = None,
        next: ListNode | None = None,
    ):
        self.key = key
        self.val = val
        self.prev = prev
        self.next = next


class LRUCache:
    def __init__(self, capacity: int):
        self.d: dict[int, ListNode] = dict()  # map keys to nodes
        self.lru = ListNode(-1, -1, None, None)
        self.mru = ListNode(-1, -1, None, None)
        node = self.lru
        for i in range(1, capacity + 1):
            node.next = ListNode(-i, -i, node, None)
            self.d[-i] = node.next
            node = node.next
        node.next = self.mru
        self.mru.prev = node

    def get(self, key: int) -> int:
        if key in self.d:
            node = self.d[key]
            while node.next != self.mru:
                toswap = node.next
                if not node or not toswap:
                    raise Exception("wtf")
                toswap.prev = node.prev
                node.next = toswap.next
                node.prev = toswap
                toswap.next = node
            return node.val
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        # print(f"putting {key}, {value}")
        if key in self.d:
            node = self.d[key]
            while node.next != self.mru:
                toswap = node.next
                if not node or not toswap:
                    raise Exception("wtf")
                toswap.prev = node.prev
                node.next = toswap.next
                node.prev = toswap
                toswap.next = node
            node.val = value
        else:
            if not self.lru.next:
                raise Exception("wtf")
            # print(self.d)
            # print("deleting", self.lru.next.key)
            del self.d[self.lru.next.key]
            # print(self.d)
            self.lru.next = self.lru.next.next
            self.d[key] = ListNode(key, value, self.mru.prev, self.mru)
            if not self.mru.prev:
                raise Exception("wtf")
            self.mru.prev.next = self.d[key]
            self.mru.prev = self.d[key]

    def pp(self):
        print("--- dict ---")
        print(self.d.keys)
        print("--- ll ---")
        node = self.lru.next
        while node and node != self.mru:
            print(f"node {node.key} {node.val}")
            node = node.next


lruc = LRUCache(2)
lruc.pp()
lruc.put(1, 1)
lruc.pp()
lruc.put(2, 2)
lruc.pp()
print(lruc.get(1))
lruc.pp()
lruc.put(3, 3)
lruc.pp()
print(lruc.get(2))
lruc.pp()
